plugins {
	id 'java'
	id 'jacoco'
	id "org.sonarqube" version "4.3.0.3225"
	id 'io.spring.dependency-management' version "1.1.0"
	id 'org.springframework.boot' version '3.0.1'
	id 'pl.allegro.tech.build.axion-release' version '1.14.3'
	id 'com.palantir.docker' version '0.34.0'
	id 'com.palantir.docker-run' version '0.34.0'
	id 'de.jansauer.printcoverage' version '2.0.0'
	id 'com.netflix.dgs.codegen' version '6.0.2'
}

version = scmVersion.version

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2022.0.4")
	set('kotlin.version', "1.4.31")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	implementation 'org.springframework.kafka:spring-kafka:3.0.1'
	implementation 'org.springframework.boot:spring-boot-devtools'
	implementation group: 'com.h2database', name: 'h2', version: '2.1.214'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.11.2'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.modelmapper:modelmapper:3.0.0'
	implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter"
	implementation 'io.cucumber:cucumber-spring:7.3.2'
	compileOnly 'org.projectlombok:lombok:1.18.24'
	implementation 'com.athaydes.javanna:javanna:1.1'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test:3.0.1'
	testImplementation 'com.google.truth:truth:1.1.4'
	testImplementation 'io.cucumber:cucumber-java:7.3.2'
	testImplementation 'io.cucumber:cucumber-junit:7.3.2'
	testImplementation 'org.junit.vintage:junit-vintage-engine:5.8.2'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release"
	}
}

generateJava{
	schemaPaths = ["${projectDir}/src/main/resources/schema"]
	packageName = 'com.ams.dgs'
	generateClient = true
}

test {
	useJUnitPlatform()
	jacoco {
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
	finalizedBy jacocoTestReport, jacocoTestCoverageVerification, printCoverage
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'yashwanth01'
String imageName = "${dockerHubUsernameProperty}/ami:$version"

docker {
	name imageName
	files "build/libs/${bootJar.archiveFileName.get()}"
	buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
	name project.name
	image imageName
	ports '9090:8080'
	clean true
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

task('doStuff', type: Copy) {
	println 'congiguring task'
	doFirst {
		println 'running task'
	}
}

sonar {
	properties {
		property "sonar.host.url", property('sonar.host.url')
		property "sonar.projectKey", property('sonar.project.key')
		property "sonar.token", property('sonar.token')
	}
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/reports/jacocoHtml")
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/model/**',
					'**/entity/**',
					'**/repository/**',
					'**/config/**',
					'**/streams/event/**',
					'**/constants/**',
					'**/dgs/client/**',
					'**/dgs/types/**',
					'**/aop/**'
			])
		}))
	}

}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					'**/model/**',
					'**/entity/**',
					'**/repository/**',
					'**/config/**',
					'**/streams/event/**',
					'**/constants/**',
					'**/dgs/client/**',
					'**/dgs/types/**',
					'**/aop/**'
			])
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.7
			}
		}
	}
}